@use "./file-tree.scss";
@use "./tab.scss";

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

* {
  margin: 0;
  padding: 0;
  transition: 250ms;
  transition-timing-function: cubic-bezier(0,0,.13,1.38);
  --default-animation-timing-function: cubic-bezier(0,0,.13,1.38);
}

.bounce-tr {
  transition: 250ms;
  transition-timing-function: var(--default-animation-timing-function);
}

.bounce-anim {
  animation-timing-function: var(--default-animation-timing-function);
}

h1, h2, h3, h4, h5, h6 {
  line-height: 1;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}

a:hover {
  color: #24c8db;
}

input,
button,
textarea {
  border-radius: 0.6rem;
  border: 1px solid transparent;
  --pad-width: 1.2em;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  color: #000000;
  background-color: #dddddddd;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
}

input::file-selector-button {
  background: hsl(var(--base-hue), 80%, 20%);
  padding: 0.3rem 0.9rem;
  border-radius: 50px;
  font-weight: bold;
  color: white;
  border: none;
  box-shadow: 0 3px 7px -1px #0007;
  margin-right: 0.75rem;
  transition: 200ms;
  transition-timing-function: var(--default-animation-timing-function);
  scale: 1.05;

  &:hover {
    scale: 1.1;
  }
}

button {
  cursor: pointer;
}

button:active {
  background-color: #0f0f0f69;
}

input,
button {
  outline: none;
}

polyline {
  stroke-width: 5;
}

.circle {
    border-radius: 50%;
}

.spread {
  display: flex;
  justify-content: center;
  align-items: center;

  &.between {
    justify-content: space-between;
  }

  &.column {
    flex-direction: column;

    // Because wanting a gap is so common everywhere I use column
    gap: 1rem;

    &.no-gap {
      gap: 0rem;
    }
  }

  &.around {
    justify-content: space-around;
  }

  &.jstart {
    justify-content: flex-start;
  }

  &.astart {
    align-items: flex-start;
  }

  &.small-gap {
    gap: 0.5rem;
  }

  &.gap {
    gap: 1rem;
  }

  &.max-width > * {
    width: 100%;
  }

  // input components for some reason doesn't take padding into account
  &.max-width > input {
    // --pad-width covers only one side, so
    --width: calc(var(--pad-width) * 2);
    width: calc(100% - var(--width));
  }
}
